% ============================================
% 全局优化引论
% R. Horst, P.M. Pardalos, N.V. Thoai 著
% 黄红选 译
% 梁治安 校
% P201
% =============================================
%   min f( x1, x2 ) = -( x1 - 20 )^2 - ( x2 - 10 )^2
%   s.t. x2 - x1/2 <= 10
%        ( x2 - 10 )^2 + ( x1 )^2 <= 500
%        x1 >= 0, x2 >= 0
%

clc ;
clear ;
close all ;

path = './bt-1.3' ;
addpath( path ) ;

% ===========================
% 约束一: 线性约束
% ===========================
Aineq = [ -1/2,  1  ; ...
          -1  ,  0  ; ...    % lb
           0  , -1  ; ...
           1  ,  0  ; ...    % ub
           0  ,  1  ; ] ;
bineq = [ 10 ; ...
           0 ; ...
           0 ; ...
           30 ; ...
           30 ; ] ;
       
rep.B = Aineq ;
rep.b = bineq ;

P   = eval( polyh( rep, 'h' ) ) ; % 求出多胞体 P 的 H-rep, V-rep, P-rep   
CH  = vrep( P ) ;                 % 获取多胞体 P 的 V-rep
Adj = adj( P ) ;                  % 获取顶点对应的链表( 邻接表表示形式 )

plot( P ) ;
axis equal ;
grid on ;
hold on ;

% ==========================
% 约束二: 凸约束
% ==========================
r = sqrt( 500 ) ;       % 半径
a = 0 ;                 % 横坐标
b = 10 ;                % 纵坐标

para = [ a - r, b - r,  2*r, 2*r ] ;
rectangle( 'Position' , para   , ...
           'Curvature', [ 1 1 ] ) ;

% ================================
% GCP 问题的凸集 D 约束   
% ================================
D.Aineq   = Aineq ;
D.bineq   = bineq ;
D.cst     = @cst  ;
D.subgrad = @subgrad ;

% =============================
% 初始单纯形 S 和其内点 x0
% =============================
x0 = [ 12 ; 8  ; ] ;        % 单纯形 S 的内点 x0
V1 = [ 5  ; 5  ; ] ;
V2 = [ 15 ; 3  ; ] ;
V3 = [ 18 ; 15 ; ] ;
S  = [ V1, V2, V3 ] ;       % 凸集 D 的内单纯形 S


rep.V = S ;
P   = eval( polyh( rep, 'v' ) ) ; % 求出多胞体 P 的 H-rep, V-rep, P-rep
opt.color = [ 0.1, 1, 0 ] ;
plot( P, opt ) ;
plot( x0(1), x0(2), 'rs', 'LineWidth', 2 ) ;

% =============================
% 初始多面体 Pk
% =============================
Pk.Aineq = Aineq ;
Pk.bineq = bineq ;
% Pk.Aineq = [ -1  ,  0  ; ...    % lb
%               0  , -1  ; ...
%               1  ,  0  ; ...    % ub
%               0  ,  1  ; ] ;
% Pk.bineq = [  0  ; ...
%               0  ; ...
%               25 ; ...
%               20 ; ] ;
       
rep.B = Pk.Aineq ;
rep.b = Pk.bineq ;
P   = eval( polyh( rep, 'h' ) ) ; % 求出多胞体 P 的 H-rep, V-rep, P-rep 
opt.color = [ 0.1, 0.8, 0.5 ] ;
plot( P, opt ) ;

% =============================
% 模型装载
% =============================
GCP.D      = D ;
GCP.oracle = @oracle ;

GCP.S      = S  ;
GCP.x0     = x0 ;
GCP.Pk     = Pk ;



[ x, fval, output ] = gcp_solver( GCP )






% ==============================
% 目标函数
% ==============================
function f = oracle( x )
    % 目标函数
    % f( x1, x2 ) = -( x1 - 20 )^2 - ( x2 - 10 )^2
    f = -( x(1) - 20 )^2 - ( x(2) - 10 )^2 ;
end

% ==============================
% 约束函数
% ==============================
function g = cst( x )
    g = x(1)^2 + ( x(2) - 10 )^2 - 500 ;
end

% ===========================
% 约束函数的次梯度
% ===========================
function grad = subgrad( x )
    % 约束函数的次梯度
    grad = [ 2*( x(1)      ) ; ...
             2*( x(2) - 10 ) ; ] ;
end



